//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KingITAleksandrov
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KingITEntities : DbContext
    {
        private static KingITEntities _context;
        public static KingITEntities GetContext()
        {
            if (_context == null)
                _context = new KingITEntities();

            return _context;
        }
        public KingITEntities()
            : base("name=KingITEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Pavilions> Pavilions { get; set; }
        public virtual DbSet<Rent> Rent { get; set; }
        public virtual DbSet<ShopCenters> ShopCenters { get; set; }
        public virtual DbSet<Tenants> Tenants { get; set; }
    
        public virtual int AddDateRentThreeYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDateRentThreeYear");
        }
    
        public virtual int ChangeStatusOfRent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeStatusOfRent");
        }
    
        public virtual int RemoveDateRentThreeYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveDateRentThreeYear");
        }
    
        public virtual int RentOrBookPavilionInSC(Nullable<bool> status_action, string pavilion_number, Nullable<long> sC_number, Nullable<System.DateTime> start_date, Nullable<System.DateTime> end_date, Nullable<long> tenant_number, Nullable<long> employee_number)
        {
            var status_actionParameter = status_action.HasValue ?
                new ObjectParameter("status_action", status_action) :
                new ObjectParameter("status_action", typeof(bool));
    
            var pavilion_numberParameter = pavilion_number != null ?
                new ObjectParameter("pavilion_number", pavilion_number) :
                new ObjectParameter("pavilion_number", typeof(string));
    
            var sC_numberParameter = sC_number.HasValue ?
                new ObjectParameter("SC_number", sC_number) :
                new ObjectParameter("SC_number", typeof(long));
    
            var start_dateParameter = start_date.HasValue ?
                new ObjectParameter("start_date", start_date) :
                new ObjectParameter("start_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            var tenant_numberParameter = tenant_number.HasValue ?
                new ObjectParameter("tenant_number", tenant_number) :
                new ObjectParameter("tenant_number", typeof(long));
    
            var employee_numberParameter = employee_number.HasValue ?
                new ObjectParameter("employee_number", employee_number) :
                new ObjectParameter("employee_number", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RentOrBookPavilionInSC", status_actionParameter, pavilion_numberParameter, sC_numberParameter, start_dateParameter, end_dateParameter, tenant_numberParameter, employee_numberParameter);
        }
    }
}
